import pandas as pd
import re 
import io

configfile: 'config/config.yaml'

sample_df = (pd.read_csv(config['samples'],
 sep='\t',
 dtype={'sample_name':str, 'fastq':str})
 .set_index('sample_name', drop=False))

rule all:
     input:
        expand('results/01_called_variants/{sample}.vcf',
                sample=sample_df.sample_name),
        'results/01_called_variants/output.tsv'
        

rule bowtie_index:
    input:
        genome=config['genome']
    output:
        multiext(config['genome'],
        ".1.bt2",".2.bt2",".3.bt2",
        ".4.bt2",".rev.1.bt2",".rev.2.bt2")
    conda: 'envs/bowtie2.yaml'
    shell:
        "bowtie2-build {input.genome} {input.genome}"

rule quality_control:# Creating a new rule for Quality control 
    input:
        reads='Resources/reads.fastq' #Inputting the reads from the yeast reads
    output:
        'results/02_QC/reads_trim.fastq' #Final output
    conda:
        'envs/fastqc_p.yaml'
    shell:#Line 1 creates a qc file for the reads before trimming #Line 
        """
        fastqc {input.reads} -o results/02_QC 
        fastp -i {input.reads} -o results/02_QC/reads_trim.fastq --json /dev/null --html /dev/null #Disabling json and html results
        fastqc results/02_QC/reads_trim.fastq 
        """

rule map_reads:
    input:
        idx = rules.bowtie_index.output,
        qc_reads= rules.quality_control.output
    output:
        temp('results/00_mapped_reads/{sample}.unsorted.sam')
    params:
        idx = config['genome']
    conda: 'envs/bowtie2.yaml'
    shell:
        'bowtie2 -x {params.idx} '
        '-U {input.qc_reads} '
        '-S {output} '

rule sam_to_bam:
    input:
        rules.map_reads.output
    output:
        'results/00_mapped_reads/{sample}.bam'
    threads: 2
    conda: 'envs/htslib.yaml'
    shell:
        'samtools sort '
        '-@ {threads} '
        '-o {output} {input} '

rule index_bam:
    input:
        rules.sam_to_bam.output
    output:
        'results/00_mapped_reads/{sample}.bam.bai'
    conda: 'envs/htslib.yaml'
    shell:
        'samtools index {input} '

rule call_variants:
    input:
        rules.index_bam.output,
        aligned_reads = rules.sam_to_bam.output,
        genome = config['genome']

    output:
        'results/01_called_variants/{sample}.vcf'
    conda: 'envs/htslib.yaml'
    shell:
        'bcftools mpileup -Ou '
        '-f {input.genome} '
        '{input.aligned_reads} '
        '| bcftools call -m -v '
        '> {output}'

rule tsv_file:
    input:
        "results/01_called_variants/sample.vcf"
    output:
        'results/01_called_variants/output.tsv'
    run:
        with open("results/01_called_variants/sample.vcf", 'r') as f:
            lines = [l for l in f if not l.startswith('##')]
            df= pd.read_csv(
                io.StringIO(''.join(lines)),
                dtype={'#CHROM': str, 'POS': int, 'ID': str, 'REF': str, 'ALT': str,'QUAL': str, 'FILTER': str, 'INFO': str},sep='\t').rename(columns={'#CHROM': 'CHROM'})
        mylist=list(df["CHROM"])
        with open("results/01_called_variants/output.tsv",'w') as output:
            for count, elem in sorted(((mylist.count(e), e) for e in set(mylist)), reverse=True):
                print('%s\t(%d)' % (elem, count),file=output)
        
